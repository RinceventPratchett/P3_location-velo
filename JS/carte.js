function ajaxGet(url, callback) {    var req = new XMLHttpRequest();    req.open("GET", url);    req.addEventListener("load", function() {        if (req.status >= 200 && req.status < 400) {            // Appelle la fonction callback en lui passant la réponse de la requête            callback(req.responseText);        } else {            console.error(req.status + " " + req.statusText + " " + url);        }    });    req.addEventListener("error", function() {        console.error("Erreur réseau avec l'URL " + url);    });    req.send(null);}class Carte {    constructor(parent, lat, lng, minZoom, maxZoom, url, urlCalque, urlAjax, iconUrl, iconSize, Anchor, popupAnchor) {        this.parent = document.getElementById(parent)        this.carte = L.map(this.parent).setView([lat, lng], 14);        this.urlAjax = urlAjax;        this.stations = [];        const ArrayStations = this.stations; //POUR LA BOUCLE         this.calque = L.tileLayer('url', { minZoom: "", maxZoom: "", attribution: 'urlCalque' })        this.icone = L.icon(this.iconUrl, this.iconSize, this.Anchor, this.popupAnchor)        this.iconUrl = ""        this.iconSize = ["", ""]        this.Anchor = ["", ""]        this.popupAnchor = ["", ""]        this.minZoom = minZoom;        this.maxZoom = maxZoom;        this.clusters = L.markerClusterGroup         this.regroupement = L.featureGroup(this.clusters);        this.form = document.getElementById("form1")        this.form2 = document.getElementById("form2")        this.divResa = document.getElementById("div_resa");        this.submit = document.getElementById("submit");        this.divSectionCarte = document.getElementById("section_carte");        this.divForm = document.getElementById("div_form");        this.fermeture = document.createElement("div");        this.imageFermeture = document.createElement("img");        this.messageFermeture = document.createElement("button")        this.submit = document.getElementById("submit")        this.canvas = document.createElement("canvas");        this.ctx = this.canvas.getContext('2d')        this.mousePos = { x: 0, y: 0 };        this.lastPos = this.mousePos;        this.initDessin = false;    }    // Requête sur l'API( Ici ce sera JC DECAUX)    creerCarte() {        //en remplacement lignes 61 à 66 cel apouurait être "this.calque.addTo(this.carte)", mais ça ne fonctionne pas ... donc;        L.tileLayer(' http://www.toolserver.org/tiles/bw-mapnik/{z}/{x}/{y}.png', {            minZoom: 12,            maxZoom: 17,            attribution: '&copy; Openstreetmap France | &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'        }).addTo(this.carte);}        getStations() {            ajaxGet(this.urlAjax, this.stationLoader)        }        initCarte() {            this.creerCarte();            //this.ajouterCalque();            this.getStations()        }        stationLoader = (reponse) => {            this.stations = JSON.parse(reponse);            this.stations.forEach(station => {                this.icone; // défini dans le constructor                function creerMarqueurCarte() {                    this.clusters;                    var marqueurCarte = L.marker([station.position.lat, station.position.lng], { icon: this.icone }).addTo(this.carte)                    marqueurCarte.bindPopup("<p>" + station.name + "</p>").openPopup();                    this.clusters.addLayer(marqueurCarte); // ajout des marqueurs au groupe clusters                    this.carte.addLayer(this.clusters);                    var regroupement = L.featureGroup(this.clusters);                    this.carte.fitBounds(regroupement.getBounds())                }                function addlistenersCarte() {                    marqueurCarte.addEventListener("click", (e) => {                        this.placesDispo = this.form.elements.places.value                        this.velosDispo = this.form.elements.velos.value                        this.adresseStation = this.form.elements.adresse.value;                        //GESTION DES ELEMENTS DE MESSAGE EN CAS DE STATION FERMEE OU VELO INDISPO                        if ((this.status = !"OPEN") || (this.velosDispo === 0)) {                            this.divSectionCarte.style.height = "auto";                            this.divForm.style.height = "auto";                            this.fermeture.id = "form3";                            this.imageFermeture.src = "images_sliders/png/chien-carlin.png";                            this.messageFermeture = document.createElement("button");                            this.messageFermeture.id = "messageFermeture"                            this.messageFermeture.textContent = "Choisir une station proche de celle ci"                            this.divResa.innerHTML = ""; // vidage de la divResa                            this.divResa.style.borderRadius = "20px";                            this.divResa.appendChild(fermeture); //mettre dans la div resa vide la div de fermeture                            this.fermeture.appendChild(imageFermeture) // la div contient une image (chien)                            this.fermeture.appendChild(messageFermeture); // la div ajoutée contient un message                            this.form.style.display = "none" // Le formulaire disparait                            // au click sur le bouton du message de station fermée, repartir sur les formulaires initiaux                            this.messageFermeture.addEventListener("click", (e) => {                                this.form.style.display = "block";                                this.divResa.innerHTML = "";                                this.divResa.appendChild(form2);                                this.divSectionCarte.style.height = "650px";                                this.divForm.style.height = "400px";                                this.form.elements.places.value = "";                                this.form.elements.velos.value = "";                                this.form.elements.adresse.value = "";                            }) // FERMETURE ADDLISTENERS LESSAGE FERMETURE                        } //FERMETURE DU IF                     }) //FERMETURE ADDLISTENERS                } //FERMETURE ADDLISTENERS                      })//FERMETURE BOUCLE         } //FERMETURE STATION LOADER            }    var carte = new Carte("carte", 43.600000, 1.433333, 12, 17, ' http://www.toolserver.org/tiles/bw-mapnik/{z}/{x}/{y}.png', '&copy; Openstreetmap France | &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors', "https://api.jcdecaux.com/vls/v1/stations?contract=toulouse&apiKey=1ebef17bde5413d6ad199afa6cffac6cee46aa37", "images_sliders/icones/velico.png", [26, 26], [13, 26], [0, -26]);    carte.initCarte();